#!/bin/sh

usage() {
    cat <<END_USAGE
aptcentral - centralized agent for running "apt" commands

Usage:
    sudo $0 --prefix PREFIX start
    $0 --prefix PREFIX stop
    $0 --prefix PREFIX install PACKAGE [ PACKAGES ... ]
    $0 --prefix PREFIX remove PACKAGE [ PACKAGES ... ]
    $0 --prefix PREFIX update

'start' starts the daemon.
'stop' stops the daemon.
'install' tells the daemon to 'apt-get install -y ...'.
'remove' tells the daemon to 'apt-get remove -y ...'.
'update' tells the daemon to 'apt-get update'.

'--prefix PREFIX' is required, and must be an absolute path to a directory
whose access permissions mask is 700.
END_USAGE
}

check_package_args() {
    for package in "$@"; do
        case "$package" in
        -*)
            >&2 echo "Invalid package name \"$package\" starts with a hyphen."
            return 1 ;;
        *" "*)
            >&2 echo "Invalid package name \"$package\" contains a space."
            return 1 ;;
        *) ;;
        esac
    done
}

check_solo_arg() {
    flag="$1"
    shift
    if [ "$#" -ne 0 ]; then
        >&2 echo "$flag parameter must appear alone."
        >&2 echo "Instead, received additional arguments: $@"
        return 1
    fi
}

# sprinkler PIPE FILE [ FILES ... ] &
#
# Read from the specified pipe and "tee --append" the contents of the pipe to
# the specified files.
#
# This function is meant to be run as a background process.
sprinkler() {
    # Ignore signals that might be sent when our process group leader exits.
    trap "" SIGHUP SIGINT

    pipe="$1"
    shift # so now "$@" is the output files

    # While the pipe exists, tee it to the output files in append mode.
    while true; do
        # The "tee" command is executed in a subshell, so that if "$pipe" no
        # longer exists and bash reports an error, we can discard the error
        # message and exit cleanly, i.e. the pipe not existing is the graceful
        # shutdown. This avoids a race between checking for the existence of the
        # pipe and trying to use it.
        (<"$pipe" >/dev/null tee --append "$@") 2>/dev/null || break
    done
}

# daemon &
#
# Execute the main loop of an aptcentral daemon. This function assumes the existence of
# the following named pipes:
#
# - $prefix/var/run/aptcentral/stdout 
# - $prefix/var/run/aptcentral/stderr
#
# and of the following directories:
#
# - $prefix/var/run/aptcentral/
# - $prefix/var/log/aptcentral/
#
# This function is meant to be run as a background process, and with elevated
# privileges -- those needed to run "apt-get" commands.
daemon() {
    # Ignore signals that might be sent when our process group leader exits.
    trap "" SIGHUP SIGINT

    # Create "tee" child processes that drain the "stdout" and "stderr" pipes
    # into the appropriate log files.
    # These "sprinklers" will exit after their input pipes are removed.
    #
    # The point of the sprinklers is to have separate log files for stdout and
    # stderr, but also to have a combined log file with both. Note that
    # because stdout and stderr are managed by separate processes, lines in
    # the combined file could appear out of order. But I bet they won't.
    sprinkler $prefix/var/run/aptcentral/stdout \
        $prefix/var/log/aptcentral/daemon.stdout.log \
        $prefix/var/log/aptcentral/daemon.log &

    sprinkler $prefix/var/run/aptcentral/stderr \
        $prefix/var/log/aptcentral/daemon.stderr.log \
        $prefix/var/log/aptcentral/daemon.log &

    # Now that the sprinklers are set up, we can redirect output to the pipes.
    exec >$prefix/var/run/aptcentral/stdout
    exec 2>$prefix/var/run/aptcentral/stderr

    # Process commands from the command pipe.
    while true; do
        while read -r stdout_pipe stderr_pipe status_pipe command args; do
            case $command in
            exit)
                exit_stdout_pipe="$stdout_pipe"
                exit_stderr_pipe="$stderr_pipe"
                exit_status_pipe="$status_pipe"
                echo "exiting...";
                break 2 ;; # break out of the outer loop
            install)
                # This is potentially unsafe. It's important that $prefix is a
                # directory that only the sudoer can cd into. At least then
                # it's only he who can execute arbitrary code as root this way.
                >"$stdout_pipe" 2>"$stderr_pipe" apt-get install -y $args
                >"$status_pipe" printf "$?" ;;
            remove)
                # See the note about safety, above.
                >"$stdout_pipe" 2>"$stderr_pipe" apt-get remove -y $args
                >"$status_pipe" printf "$?" ;;
            update)
                # See the note about safety, above.
                >"$stdout_pipe" 2>"$stderr_pipe" apt-get update -y
                >"$status_pipe" printf "$?" ;;
            *)
                echo "aptcentral daemon received invalid command: $command $args" ;;
            esac
        done <$prefix/var/run/aptcentral/command
    done

    # Remove our pipes.
    rm $prefix/var/run/aptcentral/command
    # Removing the stdout and stderr pipes is a little trickier, because we
    # want to first rm the pipe and then close it to wake up the sprinkler.
    # Since our stdout and stderr are tied to the pipes, that means we have to
    # close our stdout and stderr. Let's redirect them to the output pipes of
    # the "exit" command that got us here.
    rm $prefix/var/run/aptcentral/stdout
    exec >"$stdout_pipe"
    rm $prefix/var/run/aptcentral/stderr
    exec 2>"$stderr_pipe"

    wait # wait for the sprinklers to terminate

    # Make sure anybody can delete the logs
    chmod 666 $prefix/var/log/aptcentral/*

    # Notify the client who sent us "exit" that we're done (zero â†’ success).
    >"$exit_status_pipe" printf "0"
}

start_daemon() {
    # Make sure that we have elevated permissions.
    if [ "$(id -u)" -ne 0 ]; then
        >&2 echo "'aptcentral start' must run as root, e.g. using sudo"
        return 1
    fi

    mkdir --parents $prefix/var/run/aptcentral # for pipes
    chmod 777 $prefix/var $prefix/var/run $prefix/var/run/aptcentral
    mkdir --parents $prefix/var/log/aptcentral # for logs
    chmod 777 $prefix/var $prefix/var/log $prefix/var/log/aptcentral

    # If the command pipe is already there, then something is or was wrong.
    if [ -p $prefix/var/run/aptcentral/command ]; then
        >&2 cat <<-END_ERROR
		The $prefix/var/run/aptcentral/command pipe already exists. Either
		'aptcentral start' is already running, or a previous instance of
		the daemon did not remove the pipe before exiting.

		If you're sure that 'aptcentral start' is not running, then 'sudo
		rm $prefix/var/run/aptcentral/command' and try again.
		END_ERROR
        return 2
    fi

    # for communicating with clients
    mkfifo --mode=666 $prefix/var/run/aptcentral/command

    # The daemon will redirect its stdout and stderr to these pipes, after
    # first spawning child processes that tee the pipes into various logs.
    if ! [ -p $prefix/var/run/aptcentral/stdout ]; then
        mkfifo $prefix/var/run/aptcentral/stdout # for logging
    fi
    if ! [ -p $prefix/var/run/aptcentral/stderr ]; then
        mkfifo $prefix/var/run/aptcentral/stderr # for logging
    fi

    </dev/null >/dev/null 2>/dev/null daemon &
}

send_command() {
    if ! [ -p $prefix/var/run/aptcentral/command ]; then
        >&2 echo "There's no pipe at $prefix/var/run/aptcentral/command."
        >&2 echo "The aptcentral daemon is probably not running."
        return 1
    fi

    # Create a temporary directory for pipes.
    workspace=$(mktemp -d)
    mkfifo $workspace/stdout 
    mkfifo $workspace/stderr
    mkfifo $workspace/status

    >$prefix/var/run/aptcentral/command echo \
        "$workspace/stdout $workspace/stderr $workspace/status $@"

    cat $workspace/stdout &
    >&2 cat $workspace/stderr &
    status="$(cat $workspace/status)"

    wait
    rm -r $workspace
    return "$status"
}

stop_daemon() {
    send_command exit
}

check_prefix() {
    case "$prefix" in
    /*) ;; # good, absolute path
    "")
        >&2 echo "The --prefix parameter is required (first)."
        return 1 ;;
    *)
        >&2 echo "--prefix must be an absolute path, but \"$prefix\" is not."
        return 1 ;;
    esac

    if ! [ -e "$prefix" ]; then
        >&2 echo "--prefix must exist, but the specified \"$prefix\" does not."
        return 1
    fi

    if ! [ -d "$prefix" ]; then
        >&2 echo "--prefix must be a directory, but the specified \"$prefix\" is not."
        return 1
    fi

    # file access permissions
    permissions=$(stat --format=%a "$prefix")
    if [ "$permissions" != 700 ]; then
        >&2 echo "--prefix must have permissions mask 700, but $prefix has $permissions."
        return 1
    fi
}

# Parse command line arguments and run the relevant functions.
prefix=""
while true; do
    case "$1" in
    -h|--help)
        usage
        exit ;;
    --prefix)
        prefix="$2"
        shift 2 ;;
    start)
        check_solo_arg "$@" || exit
        check_prefix || exit
        start_daemon
        exit ;;
    stop)
        check_solo_arg "$@" || exit
        check_prefix || exit
        stop_daemon
        exit ;;
    install)
        shift
        check_package_args "$@" || exit
        check_prefix || exit
        send_command install "$@"
        exit ;;
    remove)
        shift
        check_package_args "$@" || exit
        check_prefix || exit
        send_command remove "$@"
        exit ;;
    update)
        check_solo_arg "$@" || exit
        check_prefix || exit
        send_command update
        exit ;;
    *)
        >&2 usage
        >&2 echo
        >&2 echo "Invalid argument(s): $@"
        exit 1;;
    esac
done
